<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.surge.device.repository.ElectricFenceMapper">

	<resultMap type="ElectricFence" id="ElectricFenceResult">
		<id     property="id"   column="id"   />
		<result property="orgId"   column="org_id"   />
		<result property="name"   column="name"   />

		<result column="fence_type" property="fenceType" />
		<result column="geo_json" property="geoJson" typeHandler="com.surge.common.core.mybatis.handler.JsonTypeHandler" />
		<result column="geom" property="geom" typeHandler="com.surge.common.core.mybatis.handler.GeometryTypeHandler" />

		<result column="rule_type" property="ruleType"  />
		<result column="time_range" property="timeRange" typeHandler="com.surge.common.core.mybatis.handler.JsonbTypeHandler" />

		<result property="zoom" column="zoom" />
		<result property="cover" column="cover" />

		<result property="status"     column="status"      />
		<result property="delFlag"     column="del_flag"   />

		<result property="createBy"   column="create_by"   />
		<result property="createTime" column="create_time" />
		<result property="updateBy"   column="update_by"   />
		<result property="updateTime" column="update_time" />
		<result property="remark"     column="remark"      />
	</resultMap>

	<select id="selectById" resultMap="ElectricFenceResult">
		SELECT ef.*, ST_AsGeoJSON(geom) as geo_json
		FROM nc_device.electric_fence ef
		<where>
			ef.id = #{id}
		</where>
	</select>

	<select id="selectList" resultMap="ElectricFenceResult">
		SELECT id, org_id, name, fence_type,
		       geom, ST_AsGeoJSON(geom) as geo_json,
		       rule_type, time_range,
		       zoom, cover, status, del_flag,
		       create_by, create_time, update_by, update_time
		FROM nc_device.electric_fence
		<where>
			${ew.sqlSegment}
		</where>
	</select>

	<select id="queryByDeviceId" resultMap="ElectricFenceResult">
		SELECT ef.*, ST_AsGeoJSON(ef.geom) as geo_json
		FROM nc_device.electric_fence ef
		INNER JOIN nc_device.electric_fence_device ed ON ef.id = ed.fence_id
		where ed.device_id=#{deviceId} and ef.del_flag='0' and ef.status='0'
	</select>

	<insert id="insertOne" parameterType="ElectricFence">
		INSERT INTO nc_device.electric_fence (
			id,
			org_id,
			name,
			fence_type,
			geom,
			rule_type,
			time_range,
			zoom,
			cover,
			status,
			del_flag,
			create_by,
			create_time,
			update_by,
			update_time,
			remark
		)
		VALUES (
				   #{id},
		           #{orgId},
				   #{name},
				   #{fenceType},
				   ST_GeomFromGeoJSON(#{geoJson, typeHandler=com.surge.common.core.mybatis.handler.JsonTypeHandler}),
				   #{ruleType},
				   #{timeRange, typeHandler=com.surge.common.core.mybatis.handler.JsonbTypeHandler},
				   #{zoom},
				   #{cover},
				   #{status},
				   #{delFlag},
				   #{createBy},
				   #{createTime},
				   #{updateBy},
				   #{updateTime},
				   #{remark}
			   )
	</insert>

	<update id="updateById" parameterType="com.surge.device.domain.entity.ElectricFence" >
		UPDATE nc_device.electric_fence
		<set>
			<if test="orgId != null">org_id = #{orgId},</if>
		    <if test="name != null">name = #{name},</if>
			<if test="fenceType != null">fence_type = #{fenceType},</if>
			<if test="geoJson != null">
				geom = ST_GeomFromGeoJSON(#{geoJson, typeHandler=com.surge.common.core.mybatis.handler.JsonTypeHandler}),
			</if>
			<if test="ruleType != null">rule_type = #{ruleType},</if>
			<if test="timeRange != null">time_range = #{timeRange, typeHandler=com.surge.common.core.mybatis.handler.JsonbTypeHandler},</if>
			<if test="zoom != null">zoom = #{zoom},</if>
			<if test="cover != null">cover = #{cover},</if>
			<if test="status != null">status = #{status},</if>
			<if test="delFlag != null">del_flag = #{delFlag},</if>
			<if test="createBy != null">create_by = #{createBy},</if>
			<if test="createTime != null">create_time = #{createTime},</if>
			<if test="updateBy != null">update_by = #{updateBy},</if>
			<if test="updateTime != null">update_time = #{updateTime},</if>
			<if test="remark != null">remark = #{remark}</if>
		</set>
		WHERE id = #{id}
	</update>

</mapper>